#
#  STACK=ver7
#
#  aws cloudformation create-stack
#  --stack-name ${STACK}
#  --template-body file://cloud-form.yml
#  --parameters "ParameterKey=KeyName,ParameterValue=MyBeanstalkEc2" "ParameterKey=InstanceType,ParameterValue=t2.micro"
#
# aws cloudformation describe-stacks --stack-name ${STACK}--query 'Stacks[0].Outputs'
#
# aws cloudformation describe-stacks --stack-name ${STACK} --query "Stacks[0].Outputs[?OutputKey=='PublicDNS'].OutputValue" --output text
#
# Above may return something like ec2-54-80-71-114.compute-1.amazonaws.com
# Then
# curl ec2-54-80-71-114.compute-1.amazonaws.com/book/15
#
# aws cloudformation delete-stack --stack-name ${STACK}
#
AWSTemplateFormatVersion: '2010-09-09'
Description: Template for starting my EC2 app that connects to separate EC2 redis
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair like "MyBeanstalkEc2". Cannot be blank.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.nano
    AllowedValues: [t2.nano, t2.micro, t2.small]
    ConstraintDescription: Must be a valid EC2 instance type.
  SSHLocation:
    # This does not quite work. Even with nonsense value like 1.2.3.4/0 one can get in
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be valid IP CIDR range of the form x.x.x.x/x. Default lets in connections from anywhere.
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    Description: 'Which kind of image to get among the ones returned by 
    aws ssm get-parameters-by-path --path "/aws/service/ami-amazon-linux-latest" --region us-east-1'
Resources:
  EC2InstanceRedis:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: MyRedis
      InstanceType: !Ref 'InstanceType'
      SecurityGroups: [!Ref 'InstanceSecurityGroup', 'redis']
      KeyName: !Ref 'KeyName'
      ImageId: !Ref 'LatestAmiId'
      UserData:
        # Any errors with this will hopefully be seen when you log into instance and do
        # sudo cat /var/log/cloud-init-output.log
        # The pipe | is a good way to represent a multi-line string
        Fn::Base64: |
          #!/bin/bash -xe
          yum update -y
          yum install docker -y
          service docker start
          docker run -d --name my-redis -p 6379:6379 redis
  EC2InstanceApp:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: MyApp
      InstanceType: !Ref 'InstanceType'
      SecurityGroups: [!Ref 'InstanceSecurityGroup', 'allow-all']
      KeyName: !Ref 'KeyName'
      ImageId: !Ref 'LatestAmiId'
      UserData:
        # Sub is smart enough to extract the given value and even set up dependency
        # so that EC2InstanceRedis is created before EC2InstanceApp
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash -xe
            yum update -y
            yum install docker -y
            service docker start            
            docker run -d -p 80:8080 -e REDIS_HOST=${EC2InstanceRedis.PublicDnsName} --name cachedemo philip11/cachedemo:latest
  InstanceSecurityGroup:
    # Creating this security group just for example. Prefer to reuse existing groups, see above.
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref 'SSHLocation'
Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'EC2InstanceApp'
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt [EC2InstanceApp, AvailabilityZone]
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt [EC2InstanceApp, PublicDnsName]
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt [EC2InstanceApp, PublicIp]
